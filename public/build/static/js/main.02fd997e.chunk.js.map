{"version":3,"sources":["serviceWorker.js","components/PageHeader/index.jsx","components/Filesize/index.jsx","components/FilePicker/index.jsx","components/Source/index.jsx","components/Uploader/index.jsx","components/Destination/index.jsx","components/Container/index.jsx","index.js"],"names":["Boolean","window","location","hostname","match","PageHeader","className","this","props","status","style","fontSize","Component","FileSize","title","size","i","Math","floor","log","pow","toFixed","fileSize","FilePicker","uploadFile","e","currentTarget","files","length","file","type","fileSelected","alert","htmlFor","display","onChange","id","Source","state","image","setState","reader","FileReader","onload","target","result","readAsDataURL","src","alt","Uploader","compressor","quality","progressive","uploading","setCompressor","value","setQuality","setProgressive","checked","startUpload","setStatus","form","FormData","append","axios","post","then","response","uploaded","fileId","data","opts","catch","error","console","key","min","max","disabled","onClick","Destination","url","reconfigure","lookForFinish","get","Date","getTime","headers","setTimeout","Container","setFileId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCCSC,E,uKAfX,OACI,yBAAKC,UAAU,aACb,wBAAIA,UAAU,eACZ,6CAEEC,KAAKC,MAAMC,OACL,2BAAOC,MAAO,CAACC,SAAU,WAAzB,IAAsCJ,KAAKC,MAAMC,OAAjD,KACA,W,GATKG,aCsBVC,E,uKAZX,OACI,4BAAKN,KAAKC,MAAMM,MAAhB,KAAyBP,KAAKQ,Q,+BAI3BA,GACP,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,IAAIJ,GAAQE,KAAKE,IAAI,OAC/C,OAA+C,GAAvCJ,EAAOE,KAAKG,IAAI,KAAMJ,IAAIK,QAAQ,GAAS,IAC/C,CAAC,IAAK,KAAM,KAAM,KAAM,MAAML,K,2BAflC,OAAIT,KAAKC,MAAMO,KACNR,KAAKe,SAASf,KAAKC,MAAMO,MAE3B,S,GANYH,aC4BRW,E,4MA1BbC,WAAa,SAAAC,GACX,GAAKA,EAAEC,cAAcC,MAAMC,OAA3B,CAIA,IAAMC,EAAOJ,EAAEC,cAAcC,MAAM,GAE9BE,EAAKC,KAAK1B,MAAM,aAKrB,EAAKI,MAAMuB,aAAaF,GAJtBG,MAAM,sB,uDAQR,OACI,2BAAOC,QAAQ,SAAS3B,UAAU,mBAChC,2BAAOwB,KAAK,OAAOpB,MAAO,CAACwB,QAAS,QAC7BC,SAAU5B,KAAKiB,WAAYY,GAAG,WAFvC,mC,GAnBiBxB,aCoCVyB,E,4MAhCbC,MAAQ,CACNvB,KAAM,EACNwB,MAAO,M,EAGTR,aAAe,SAAAF,GACb,EAAKW,SAAS,CAACzB,KAAMc,EAAKd,OAC1B,IAAM0B,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAlB,GACd,EAAKe,SAAS,CAACD,MAAOd,EAAEmB,OAAOC,UAEjCJ,EAAOK,cAAcjB,GACrB,EAAKrB,MAAMuB,aAAaF,I,uDAIxB,OACI,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,4CACb,kBAAC,EAAD,CAAUQ,MAAM,iBAAiBC,KAAMR,KAAK+B,MAAMvB,OAClD,kBAAC,EAAD,CAAYgB,aAAcxB,KAAKwB,gBAEjC,yBAAKzB,UAAU,aACZC,KAAK+B,MAAMC,MACR,yBAAKQ,IAAKxC,KAAK+B,MAAMC,MAAOjC,UAAU,YAAY0C,IAAI,KACtD,W,GA3BKpC,a,gBCqHNqC,E,4MApHbX,MAAQ,CACNY,WAAY,UACZC,QAAS,GACTC,aAAa,EACbC,WAAW,G,EAWbC,cAAgB,SAAA7B,GACd,EAAKe,SAAS,CAACU,WAAYzB,EAAEC,cAAc6B,S,EAG7CC,WAAa,SAAA/B,GACX,EAAKe,SAAS,CAACW,QAAS1B,EAAEC,cAAc6B,S,EAG1CE,eAAiB,SAAAhC,GACf,EAAKe,SAAS,CAACY,YAAa3B,EAAEC,cAAcgC,W,EAG9CC,YAAc,WACZ,EAAKnB,SAAS,CAACa,WAAW,IAC1B,EAAK7C,MAAMoD,UAAU,aAErB,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,QAAS,EAAKvD,MAAMqB,MAChCgC,EAAKE,OAAO,UAAW,EAAKzB,MAAMa,SAClCU,EAAKE,OAAO,cAAe,EAAKzB,MAAMc,aACtCS,EAAKE,OAAO,aAAc,EAAKzB,MAAMY,YAErCc,IAAMC,KAAN,iCAA6CJ,GAAMK,MAAK,SAAAC,GACtD,EAAK3D,MAAM4D,SAAS,CAClBC,OAAQF,EAASG,KACjBC,KAAM,CACJrB,WAAY,EAAKZ,MAAMY,WACvBC,QAAS,EAAKb,MAAMa,QACpBC,YAAa,EAAKd,MAAMc,kBAG3BoB,OAAM,SAAAC,GACP,EAAKjC,SAAS,CAACa,WAAW,IAC1BrB,MAAM,sCACN0C,QAAQvD,IAAIsD,O,kEAzCdlE,KAAKiC,SAAS,CACZU,WAAY3C,KAAKC,MAAM+D,KAAKrB,YAAc,UAC1CC,QAAS5C,KAAKC,MAAM+D,KAAKpB,SAAW,GACpCC,YAAa7C,KAAKC,MAAM+D,KAAKnB,cAAe,M,+BA2C9C,OACI,yBAAK9C,UAAS,oBAAeC,KAAKC,MAAMF,YACtC,yBAAKA,UAAU,kBACb,2BAAO2B,QAAQ,aACR3B,UAAU,2BADjB,cAEA,yBAAKA,UAAU,YACb,4BAAQiD,MAAOhD,KAAK+B,MAAMY,WAClBf,SAAU5B,KAAK+C,cACfhD,UAAU,eACV8B,GAAG,cAET,4BAAQmB,MAAM,WAAd,iBACA,4BAAQA,MAAM,YAAd,uBAIqB,aAA1BhD,KAAK+B,MAAMY,WACN,CACA,yBAAK5C,UAAU,iBAAiBqE,IAAI,WAClC,2BACI1C,QAAQ,UACR3B,UAAU,2BAFd,WAIA,yBAAKA,UAAU,YACb,2BACIwB,KAAK,SACL8C,IAAK,GACLC,IAAK,IACLtB,MAAOhD,KAAK+B,MAAMa,QAClBhB,SAAU5B,KAAKiD,WACflD,UAAU,eACV8B,GAAG,cAIX,yBAAK9B,UAAU,iBAAiBqE,IAAI,eAClC,yBAAKrE,UAAU,gCACb,2BACIwB,KAAK,WACL4B,QAASnD,KAAK+B,MAAMc,YACpBjB,SAAU5B,KAAKkD,eACfrB,GAAG,cACH9B,UAAU,qBAGd,2BACI2B,QAAQ,cACR3B,UAAU,oBAFd,kBAOJ,KAEN,4BAAQA,UAAU,kBAAkBwE,SAAUvE,KAAK+B,MAAMe,UACjD0B,QAASxE,KAAKoD,aADtB,iB,GA9Ga/C,aCoERoE,E,4MAhEb1C,MAAQ,CACNT,KAAM,KACNd,KAAM,EACNkE,IAAK,KACLZ,OAAQ,KACRE,KAAM,I,EAGRW,YAAc,WACZ,EAAK1C,SAAS,CAACX,KAAM,KAAMwC,OAAQ,KAAMY,IAAK,KAAMlE,KAAM,K,EAG5DqD,SAAW,SAAA3C,GACT,EAAKe,SAAS,CAACX,KAAM,EAAKrB,MAAMqB,KAAMwC,OAAQ5C,EAAE4C,OAAQE,KAAM9C,EAAE8C,OAChE,EAAK/D,MAAMoD,UAAU,YACrB,EAAKuB,iB,EAGPA,cAAgB,WACd,EAAK3E,MAAMoD,UAAU,yBACrB,IAAMqB,EAAG,yCAAqC,EAAK3C,MAAM+B,QACzDL,IAAMoB,IAAIH,EAAM,OAAS,IAAII,MAAQC,WAAWpB,MAAK,SAAAC,GACnD,IAAMpD,EAAOoD,EAASoB,QAAQ,kBAC9B,EAAK/C,SAAS,CAACyC,MAAKlE,SACpB,EAAKP,MAAMoD,UAAU,WACpBY,OAAM,SAAAC,GACHA,EAAMN,UAAsC,MAA1BM,EAAMN,SAAS1D,OACnC+E,WAAW,EAAKL,cAAe,MAE/BnD,MAAM,iCACN0C,QAAQvD,IAAIsD,GACZ,EAAKjE,MAAMoD,UAAU,uB,uDAMzB,OACI,yBAAKtD,UAAU,OACZC,KAAK+B,MAAM2C,KAAO1E,KAAKC,MAAMqB,OAAStB,KAAK+B,MAAMT,KAC5C,yBAAKvB,UAAU,4CACf,kBAAC,EAAD,CAAUQ,MAAM,mBAAmBC,KAAMR,KAAK+B,MAAMvB,OACpD,4BAAQT,UAAU,kBACVyE,QAASxE,KAAK2E,aADtB,gBAIA,KACL3E,KAAK+B,MAAM2C,KAAO1E,KAAKC,MAAMqB,OAAStB,KAAK+B,MAAMT,KAC5C,yBAAKvB,UAAU,aACf,yBAAKyC,IAAKxC,KAAK+B,MAAM2C,IAAK3E,UAAU,YAAY0C,IAAI,MAEpD,KACLzC,KAAKC,MAAMqB,OAAStB,KAAK+B,MAAMT,KAC1B,kBAAC,EAAD,CAAUvB,UAAU,OAAO8D,SAAU7D,KAAK6D,SAChCR,UAAWrD,KAAKC,MAAMoD,UACtB/B,KAAMtB,KAAKC,MAAMqB,KACjB0C,KAAMhE,KAAK+B,MAAMiC,OAE3B,U,GA5DU3D,aC4CX6E,E,4MA1CbnD,MAAQ,CACN7B,OAAQ,KACRoB,KAAM,M,EAGR6D,UAAY,SAAArB,GACV,EAAK7B,SAAS,CAAC6B,Y,EAGjBT,UAAY,SAAAnD,GACV,EAAK+B,SAAS,CAAC/B,Y,EAGjBsB,aAAe,SAAAF,GACb,EAAKW,SAAS,CAACX,U,uDAIf,OACI,yBAAKvB,UAAU,mBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAYG,OAAQF,KAAK+B,MAAM7B,UAEjC,yBAAKH,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CACIoF,UAAWnF,KAAKmF,UAChB3D,aAAcxB,KAAKwB,gBAGzB,yBAAKzB,UAAU,YACb,kBAAC,EAAD,CACIsD,UAAWrD,KAAKqD,UAChB/B,KAAMtB,KAAK+B,MAAMT,c,GAnCXjB,a,MCExB+E,IAASC,OACL,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SRwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM4B,c","file":"static/js/main.02fd997e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\n\nclass PageHeader extends Component {\n  render() {\n    return (\n        <div className=\"col-md-12\">\n          <h2 className=\"text-center\">\n            <span>Shrinkflate</span>\n            {\n              this.props.status\n                  ? <small style={{fontSize: 'medium'}}> {this.props.status} </small>\n                  : null\n            }\n          </h2>\n        </div>\n    );\n  }\n}\n\nexport default PageHeader;\n","import React, {Component} from 'react';\n\nclass FileSize extends Component {\n\n  get size() {\n    if (this.props.size) {\n      return this.fileSize(this.props.size);\n    }\n    return '0B';\n  }\n\n  render() {\n    return (\n        <h3>{this.props.title}: {this.size}</h3>\n    );\n  }\n\n  fileSize(size) {\n    const i = Math.floor(Math.log(size) / Math.log(1024));\n    return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' +\n        ['B', 'kB', 'MB', 'GB', 'TB'][i];\n  }\n}\n\nexport default FileSize;","import React, {Component} from 'react';\n\nclass FilePicker extends Component {\n\n  uploadFile = e => {\n    if (!e.currentTarget.files.length) {\n      return;\n    }\n\n    const file = e.currentTarget.files[0];\n\n    if (!file.type.match(/^image\\//g)) {\n      alert('Image files only');\n      return;\n    }\n\n    this.props.fileSelected(file);\n  };\n\n  render() {\n    return (\n        <label htmlFor=\"upload\" className=\"btn btn-primary\">\n          <input type=\"file\" style={{display: 'none'}}\n                 onChange={this.uploadFile} id=\"upload\"/>\n          Select image to shrinkflate\n        </label>\n    );\n  }\n}\n\nexport default FilePicker;\n","import React, {Component} from 'react';\nimport FileSize from '../Filesize';\nimport FilePicker from '../FilePicker';\n\nclass Source extends Component {\n\n  state = {\n    size: 0,\n    image: null,\n  };\n\n  fileSelected = file => {\n    this.setState({size: file.size});\n    const reader = new FileReader();\n    reader.onload = e => {\n      this.setState({image: e.target.result});\n    };\n    reader.readAsDataURL(file);\n    this.props.fileSelected(file);\n  };\n\n  render() {\n    return (\n        <div className=\"row\">\n          <div className=\"col-md-12 d-flex justify-content-between\">\n            <FileSize title=\"Original image\" size={this.state.size}/>\n            <FilePicker fileSelected={this.fileSelected}/>\n          </div>\n          <div className=\"col-md-12\">\n            {this.state.image ?\n                <img src={this.state.image} className=\"img-fluid\" alt=\"\"/> :\n                null}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Source;\n","import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass Uploader extends Component {\n\n  state = {\n    compressor: 'libvips',\n    quality: 85,\n    progressive: false,\n    uploading: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      compressor: this.props.opts.compressor || 'libvips',\n      quality: this.props.opts.quality || 85,\n      progressive: this.props.opts.progressive || false,\n    });\n  }\n\n  setCompressor = e => {\n    this.setState({compressor: e.currentTarget.value});\n  };\n\n  setQuality = e => {\n    this.setState({quality: e.currentTarget.value});\n  };\n\n  setProgressive = e => {\n    this.setState({progressive: e.currentTarget.checked});\n  };\n\n  startUpload = () => {\n    this.setState({uploading: true});\n    this.props.setStatus('uploading');\n\n    const form = new FormData();\n    form.append('image', this.props.file);\n    form.append('quality', this.state.quality);\n    form.append('progressive', this.state.progressive);\n    form.append('compressor', this.state.compressor);\n\n    axios.post(`http://localhost:4000/compress`, form).then(response => {\n      this.props.uploaded({\n        fileId: response.data,\n        opts: {\n          compressor: this.state.compressor,\n          quality: this.state.quality,\n          progressive: this.state.progressive,\n        },\n      });\n    }).catch(error => {\n      this.setState({uploading: false});\n      alert('Error occurred. check console log.');\n      console.log(error);\n    });\n  };\n\n  render() {\n    return (\n        <div className={`col-md-12 ${this.props.className}`}>\n          <div className=\"form-group row\">\n            <label htmlFor=\"compressor\"\n                   className=\"col-sm-4 col-form-label\">Compressor</label>\n            <div className=\"col-sm-6\">\n              <select value={this.state.compressor}\n                      onChange={this.setCompressor}\n                      className=\"form-control\"\n                      id=\"compressor\"\n              >\n                <option value=\"libvips\">libvips(vips)</option>\n                <option value=\"lilliput\">lilliput(OpenCV)</option>\n              </select>\n            </div>\n          </div>\n          {this.state.compressor === 'lilliput'\n              ? [\n                <div className=\"form-group row\" key=\"quality\">\n                  <label\n                      htmlFor=\"quality\"\n                      className=\"col-sm-4 col-form-label\"\n                  >Quality</label>\n                  <div className=\"col-sm-6\">\n                    <input\n                        type=\"number\"\n                        min={30}\n                        max={100}\n                        value={this.state.quality}\n                        onChange={this.setQuality}\n                        className=\"form-control\"\n                        id=\"quality\"/>\n                  </div>\n                </div>,\n\n                <div className=\"form-group row\" key=\"progressive\">\n                  <div className=\"col-sm-6 offset-4 form-check\">\n                    <input\n                        type=\"checkbox\"\n                        checked={this.state.progressive}\n                        onChange={this.setProgressive}\n                        id=\"progressive\"\n                        className=\"form-check-input\"\n                    />\n\n                    <label\n                        htmlFor=\"progressive\"\n                        className=\"form-check-label\"\n                    >Progressive</label>\n                  </div>\n                </div>,\n              ]\n              : null}\n\n          <button className=\"btn btn-primary\" disabled={this.state.uploading}\n                  onClick={this.startUpload}>Compress\n          </button>\n        </div>\n    );\n  }\n}\n\nexport default Uploader;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport FileSize from '../Filesize';\nimport Uploader from '../Uploader';\n\nclass Destination extends Component {\n\n  state = {\n    file: null,\n    size: 0,\n    url: null,\n    fileId: null,\n    opts: {},\n  };\n\n  reconfigure = () => {\n    this.setState({file: null, fileId: null, url: null, size: 0});\n  };\n\n  uploaded = e => {\n    this.setState({file: this.props.file, fileId: e.fileId, opts: e.opts});\n    this.props.setStatus('Uploaded');\n    this.lookForFinish();\n  };\n\n  lookForFinish = () => {\n    this.props.setStatus('waiting for finish...');\n    const url = `http://localhost:4000/download/${this.state.fileId}`;\n    axios.get(url + '?q=' + (new Date()).getTime()).then(response => {\n      const size = response.headers['content-length'];\n      this.setState({url, size});\n      this.props.setStatus('done');\n    }).catch(error => {\n      if (error.response && error.response.status === 404) {\n        setTimeout(this.lookForFinish, 2000);\n      } else {\n        alert('Error occurred. check console');\n        console.log(error);\n        this.props.setStatus('error occurred');\n      }\n    });\n  };\n\n  render() {\n    return (\n        <div className=\"row\">\n          {this.state.url && this.props.file === this.state.file\n              ? <div className=\"col-md-12 d-flex justify-content-between\">\n                <FileSize title=\"Compressed image\" size={this.state.size}/>\n                <button className=\"btn btn-primary\"\n                        onClick={this.reconfigure}>Reconfigure\n                </button>\n              </div>\n              : null}\n          {this.state.url && this.props.file === this.state.file\n              ? <div className=\"col-md-12\">\n                <img src={this.state.url} className=\"img-fluid\" alt=\"\"/>\n              </div>\n              : null}\n          {this.props.file !== this.state.file\n              ? <Uploader className=\"mt-5\" uploaded={this.uploaded}\n                          setStatus={this.props.setStatus}\n                          file={this.props.file}\n                          opts={this.state.opts}\n              />\n              : null}\n        </div>\n    );\n  }\n}\n\nexport default Destination;\n","import React, {Component} from 'react';\nimport PageHeader from '../PageHeader';\nimport Source from '../Source';\nimport Destination from '../Destination';\n\nclass Container extends Component {\n\n  state = {\n    status: null,\n    file: null,\n  };\n\n  setFileId = fileId => {\n    this.setState({fileId});\n  };\n\n  setStatus = status => {\n    this.setState({status});\n  };\n\n  fileSelected = file => {\n    this.setState({file});\n  };\n\n  render() {\n    return (\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <PageHeader status={this.state.status}/>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Source\n                  setFileId={this.setFileId}\n                  fileSelected={this.fileSelected}\n              />\n            </div>\n            <div className=\"col-md-6\">\n              <Destination\n                  setStatus={this.setStatus}\n                  file={this.state.file}\n              />\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Container;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Container from './components/Container';\n\nimport '../node_modules/bootstrap//dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Container/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}